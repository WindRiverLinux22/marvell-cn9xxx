From 41c7d771cf78c2b9f4a2030610cb9f038283a7e1 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Tue, 17 Jan 2023 22:48:11 +0800
Subject: [PATCH 2/2] octeontx2-pf: Drop the redundant get/put_cpu() around
 ->aura_freeptr()

The commit 6ea5273c71dd ("octeontx2-pf: Fix lmtst ID used in aura
free") use the get/put_cpu() to protect the usage of per_cpu pointer,
but it also unnecessarily disable the preemption for the memory
allocation. The commit 87b93b678e95 ("octeontx2-pf: Avoid use of
GFP_KERNEL in atomic context") fixed the sleep inside atomic section
warning for the non-rt kernel. But for the rt kernel, we still get
warnings like below.
  BUG: sleeping function called from invalid context at kernel/locking/spinlock_rt.c:46
  in_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 1, name: swapper/0
  preempt_count: 1, expected: 0
  RCU nest depth: 0, expected: 0
  3 locks held by swapper/0/1:
   #0: ffff800009f248e8 (rtnl_mutex){+.+.}-{3:3}, at: rtnl_lock+0x24/0x30
   #1: ffff00010eba9740 (&mbox->lock){+.+.}-{3:3}, at: otx2_init_hw_resources+0x98/0x3b4
   #2: ffff000bf3847410 ((lock)){+.+.}-{2:2}, at: rmqueue.isra.0+0x290/0xa90
  Preemption disabled at:
  [<ffff800008ae0dec>] otx2_rq_aura_pool_init+0x14c/0x290
  CPU: 3 PID: 1 Comm: swapper/0 Not tainted 5.15.87-rt48-yocto-preempt-rt+ #13
  Hardware name: Marvell OcteonTX CN96XX board (DT)
  Call trace:
   dump_backtrace+0x0/0x1a4
   show_stack+0x20/0x2c
   dump_stack_lvl+0x9c/0xd8
   dump_stack+0x18/0x34
   __might_resched+0x188/0x224
   rt_spin_lock+0x78/0x11c
   rmqueue.isra.0+0x290/0xa90
   get_page_from_freelist+0x13c/0x394
   __alloc_pages+0xdc/0x310
   page_frag_alloc_align+0x9c/0x184
   __napi_alloc_frag_align+0x50/0x64
   __otx2_alloc_rbuf+0x34/0x150
   otx2_rq_aura_pool_init+0x1c8/0x290
   otx2_init_hw_resources+0xf0/0x3b4
   otx2_open+0x104/0x670
   __dev_open+0x104/0x210
   __dev_change_flags+0x1e4/0x274
   dev_change_flags+0x2c/0x6c
   ic_open_devs+0x124/0x2e8
   ip_auto_config+0x160/0x40c
   do_one_initcall+0x84/0x4b0
   do_initcalls+0x104/0x144
   kernel_init_freeable+0x104/0x14c
   kernel_init+0x2c/0x130
   ret_from_fork+0x10/0x20

Since we have already fixed this issue with different method in commit
97b853120a3e ("octeontx2: nic: Replace get_cpu()/put_cpu() with
get_cpu_ptr()/put_cpu_ptr()"), so the get/put_cpu() added by commit 6ea5273c71dd
seems useless to us. Drop all these redundant get/put_cpu().

Upstream-Status: Pending

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/ethernet/marvell/octeontx2/nic/otx2_common.c  | 11 ++---------
 1 file changed, 2 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
index 38d555c17f51..06d59b0987f9 100644
--- a/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
+++ b/drivers/net/ethernet/marvell/octeontx2/nic/otx2_common.c
@@ -1359,7 +1359,6 @@ static void otx2_pool_refill_task(struct work_struct *work)
 	rbpool = cq->rbpool;
 	free_ptrs = cq->pool_ptrs;
 
-	get_cpu();
 	while (cq->pool_ptrs) {
 		if (otx2_alloc_rbuf(pfvf, rbpool, &bufptr)) {
 			/* Schedule a WQ if we fails to free atleast half of the
@@ -1379,7 +1378,6 @@ static void otx2_pool_refill_task(struct work_struct *work)
 		pfvf->hw_ops->aura_freeptr(pfvf, qidx, bufptr + OTX2_HEAD_ROOM);
 		cq->pool_ptrs--;
 	}
-	put_cpu();
 	cq->refill_task_sched = false;
 }
 
@@ -1736,9 +1734,7 @@ int otx2_sq_aura_pool_init(struct otx2_nic *pfvf)
 			err = otx2_alloc_rbuf(pfvf, pool, &bufptr);
 			if (err)
 				goto err_mem;
-			get_cpu();
 			pfvf->hw_ops->aura_freeptr(pfvf, pool_id, bufptr);
-			put_cpu();
 			sq->sqb_ptrs[sq->sqb_count++] = (u64)bufptr;
 		}
 	}
@@ -1784,21 +1780,18 @@ int otx2_rq_aura_pool_init(struct otx2_nic *pfvf)
 	if (err)
 		goto fail;
 
-	get_cpu();
 	/* Allocate pointers and free them to aura/pool */
 	for (pool_id = 0; pool_id < hw->rqpool_cnt; pool_id++) {
 		pool = &pfvf->qset.pool[pool_id];
 		for (ptr = 0; ptr < num_ptrs; ptr++) {
 			err = otx2_alloc_rbuf(pfvf, pool, &bufptr);
 			if (err)
-				goto err_mem;
+				return -ENOMEM;
 			pfvf->hw_ops->aura_freeptr(pfvf, pool_id,
 						   bufptr + OTX2_HEAD_ROOM);
 		}
 	}
-err_mem:
-	put_cpu();
-	return err ? -ENOMEM : 0;
+	return 0;
 fail:
 	otx2_mbox_reset(&pfvf->mbox.mbox, 0);
 	otx2_aura_pool_free(pfvf);
-- 
2.38.1

